#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Jun  8 09:11:26 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout 1
spawn ../target/debug/termal -LB -w 32 -t 5 --no-viewport ./data/test-aln-02.fas
match_max 100000
expect {
	expect -exact "\[?1049h\[1;1H\[J\[2;1H\[J\[3;1H\[J\[4;1H\[J\[5;1H\[J\[1;1H\[38;5;15m‚îå ./data/test-zoom-02.fas - 9s ‚îê\[2;1H‚îÇ\[38;2;255;165;0mAAAAAAAAAA\[38;5;5mQQQQQQQQQQ\[38;5;2mCCCCCCCCCC\[38;5;15m‚îÇ\[3;1H‚îÇ\[38;2;255;165;0mAAAAAAAAAA\[38;5;5mQQQQQQQQQQ\[38;5;2mCCCCCCCCCC\[38;5;15m‚îÇ\[4;1H‚îÇ\[38;2;255;165;0mAAAAAAAAAA\[38;5;5mQQQQQQQQQQ\[38;5;2mCCCCCCCCCC\[38;5;15m‚îÇ\[5;1H‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l" {} 
	default { exit 1 }
}
send -- "z"
expect {
	expect -exact "\[3;2H\[38;5;1mDDDDDDDDDD\[38;5;5mNNNNNNNNNN\[38;5;4mKKKKKKKKKK\[4;2H\[38;5;2mWWWWWWWWWW\[38;2;255;165;0mSSSSSSSSSS\[38;5;2mIIIIIIIIII\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l\[39m\[49m\[59m\[0m\[?25l" {} 
	default { exit 1 }
}
send -- "q"
expect eof
